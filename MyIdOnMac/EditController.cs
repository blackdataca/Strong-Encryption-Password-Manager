// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Drawing;
using Xamarin.Essentials;

namespace MyIdOnMac
{
	public partial class EditController : NSViewController
	{
        public IdItem AIdItem = null;

        public NSViewController Presentor;

        

        public EditController (IntPtr handle) : base (handle)
		{
            //uxHint.Text = "";
            
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            if (AIdItem != null)
            {
                uxSite.StringValue = AIdItem.Site;
                uxUser.StringValue = AIdItem.User;
                uxPassword.StringValue = AIdItem.Password;
                uxMemo.StringValue = AIdItem.Memo;
                //uxHint.Text = AIdItem.PasswordTip;
                //if (uxHint.Text != "")
                //uxHint.ForeColor = Color.Red;
            }
            else
            {
                AIdItem = new IdItem();
                uxSite.PlaceholderString = "Site label";
                uxUser.PlaceholderString = "User name or sign-in email address";
                uxMemo.PlaceholderString = "Optional notes";
            }

           
        }


        partial void OkDialog(NSObject sender)
        {
            AIdItem.Site = uxSite.StringValue;
            AIdItem.User = uxUser.StringValue;
            AIdItem.Password = uxPassword.StringValue;
            AIdItem.Memo = uxMemo.StringValue;

            RaiseDialogAccepted();
			CloseDialog();
        }

        private void CloseDialog()
        {
            Presentor.DismissViewController(this);
        }
        partial void CancelDialog(NSObject sender)
        {
			RaiseDialogCancelled();
			CloseDialog();
        }

		public EventHandler DialogAccepted;
		internal void RaiseDialogAccepted()
		{
			if (this.DialogAccepted != null)
			{
				this.DialogAccepted(this, EventArgs.Empty);
			}
		}

		public EventHandler DialogCanceled;
		internal void RaiseDialogCancelled()
		{
			if (this.DialogCanceled != null)
				this.DialogCanceled(this, EventArgs.Empty);
		}

        partial void copyUser(Foundation.NSObject sender)
        {
            Clipboard.SetTextAsync(uxUser.StringValue);
        }

        partial void copyPassword(Foundation.NSObject sender)
        {
            Clipboard.SetTextAsync(uxPassword.StringValue);
        }

        partial void addImageAction(NSObject sender)
        {
            var panel = new NSOpenPanel();
 
            panel.ReleasedWhenClosed = true;

            panel.Title = "Add image file";
            //panel.NameFieldLabel = "File name:";
            //panel.NameFieldStringValue = System.IO.Path.GetFileName(uxDataFile.StringValue);
            // panel.Prompt = "Create";

            panel.Directory = KnownFolders.DataDir;
            //panel.AllowedFileTypes = new string[] { "data" };
            
            panel.BeginSheet(this.View.Window, ret =>
            {
                if (ret == 1 && panel.Filenames.Length > 0)
                {
                    foreach (var inFile in panel.Filenames)
                    {
                        //Image img;
                        try
                        {
                            var img = new NSImage(inFile);
                        }
                        catch (Exception ex)
                        {
                            //Console.WriteLine(ex.ToString());
                            //img = WindowsThumbnailProvider.GetThumbnail(inFile, 64, 64, ThumbnailOptions.None);
                            var alert = new NSAlert()
                            {
                                AlertStyle = NSAlertStyle.Warning,
                                InformativeText = inFile,
                                MessageText = ex.Message,
                            };
                            alert.BeginSheet(this.View.Window);

                        }

                        //if (img != null)
                        //{
                            //string idx = imageList1.Images.Count.ToString();
                            //imageList1.Images.Add(idx, img);
                            //TempImages.Add(inFile, null);

                            //uxImages.Items.Add(Path.GetFileName(inFile), idx);
                        //}
                    }

                }
            });

        }
    }
}
