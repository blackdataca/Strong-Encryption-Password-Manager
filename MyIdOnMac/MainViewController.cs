// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Microsoft.Win32;
using System.Collections;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;

namespace MyIdOnMac
{
	public partial class MainViewController : NSViewController
	{

        private UxListDataSource _dataSource = new UxListDataSource();

        public MainViewController (IntPtr handle) : base (handle)
		{
		}

        private string IdFile
        {
            get
            {
                if (KnownFolders.DataFile != "")
                    return KnownFolders.DataFile;
                else
                    return Path.Combine(KnownFolders.DataDir, "myid_secret.data");
            }
            set
            {
                KnownFolders.DataFile = value;
            }
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Do any additional setup after loading the view.

           

        }
        public override void ViewDidAppear()
        {
            base.ViewDidAppear();

            if (uxList.Delegate != null)
                return;
            // Create the Product Table Data Source and populate it
            //_dataSource.Add(new IdItem("Xamarin.iOS", "User", "Password", "Allows you to develop native iOS Applications in C#"));
            //_dataSource.Add(new IdItem("Xamarin.Android", "User", "Password", "Allows you to develop native Android Applications in C#"));
            //_dataSource.Add(new IdItem("Xamarin.Mac", "User", "Password", "Allows you to develop Mac native Applications in C#"));

            // Populate the Product Table
            _dataSource.wndHandle = this.View.Window;
            uxList.DataSource = _dataSource;
            uxList.Delegate = new UxListDelegate(_dataSource);

            if (System.IO.File.Exists(IdFile))
            {

                PerformSegue("SignInSegue", this);
            }
            else
            {
                if (!CreateNewFile())
                    System.Environment.Exit(1);  //First time app run
            }

        }

        private bool CreateNewFile()
        {
            if (KnownFolders.DataFile != "")
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Warning,
                    InformativeText = "You will lose access to existing data file if private key is not backed up. Only click Yes if you are 100% sure private key has been backed up or you no longer need existing data file. Otherwise click No.",
                    MessageText = "Backup private key",
                };
                alert.AddButton("Yes");
                alert.AddButton("No");
                
                var result = alert.RunModal();
                if (result != 1000)
                    return false;
            }


            PerformSegue("WelcomeSegue", this);

            return true;

            
        }

        public override NSObject RepresentedObject
        {
            get
            {
                return base.RepresentedObject;
            }
            set
            {
                base.RepresentedObject = value;
                // Update the view, if already loaded.
            }
        }

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            

        }

        [Action("add:")]
        public void Add(NSObject sender)
        {
            // Preform some action when the menu is selected
            Console.WriteLine("Request to add");
            PerformSegue("AddSegue", this);

        }

        [Action("edit:")]
        public void Edit(NSObject sender)
        {
            Console.WriteLine("Request to edit");
            PerformSegue("EditSegue", this);
        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            // Take action based on the segue name
            switch (segue.Identifier)
            {
                case "SignInSegue":
                    {
                        var dialog = segue.DestinationController as SignInViewController;
        
                        dialog.DialogAccepted += (s, e) =>
                        {
                            Console.WriteLine("Dialog accepted");

                            if (!_dataSource.LoadFromDisk(IdFile, null))
                            {
                                var alert = new NSAlert()
                                {
                                    AlertStyle = NSAlertStyle.Warning,
                                    InformativeText = "The data file may be corrupted. Please choose a different data file and try again.",
                                    MessageText = "Access denied",
                                };
                                alert.BeginSheet(this.View.Window);
                                System.Environment.Exit(0);
                            }
                            uxList.ReloadData();
                        };
                        dialog.DialogCanceled += (s, e) =>
                        {
                            Console.WriteLine("Dialog Cancelled");
                            System.Environment.Exit(0);
                        };
                        dialog.Presentor = this;
                        break;
                    }
                
                case "AddSegue":
                    {
                        var dialog = segue.DestinationController as EditController;
                        dialog.Title = "New";
                        dialog.DialogAccepted += (s, e) =>
                        {
                            Console.WriteLine("Dialog accepted");
                            _dataSource.Add(dialog.AIdItem);
                            uxList.ReloadData();
                            _dataSource.SaveToDisk();
                        };
                        dialog.Presentor = this;
                        break;
                    }

                case "EditSegue":
                    {
                        if (uxList.SelectedRowCount > 0)
                        {
                            var dialog = segue.DestinationController as EditController;
                            dialog.AIdItem = _dataSource.GetAItem(uxList.SelectedRow);
                            dialog.Title = "Edit";

                            dialog.DialogAccepted += (s, e) =>
                            {
                                Console.WriteLine("Dialog accepted");
                                _dataSource.Add(dialog.AIdItem);
                                uxList.ReloadData();
                                _dataSource.SaveToDisk();
                            };
                            dialog.Presentor = this;
                        }
                        break;
                    }

                case "WelcomeSegue":
                    {
                        var dialog = segue.DestinationController as WelcomeController;

                        dialog.Presentor = this;
                        
                        dialog.DialogOk += (s, e) =>
                        {
                            if (System.IO.File.Exists(dialog.DataFile))
                            {
                                var alert = new NSAlert()
                                {
                                    AlertStyle = NSAlertStyle.Warning,
                                    InformativeText = $"Data file already exists: {dialog.DataFile}",
                                    
                                    MessageText = "Unable to create new data file",
                                };
                                alert.AddButton("OK");
                                alert.RunModal();
                                System.Environment.Exit(1);
                            }
                            IdFile = dialog.DataFile;
                            byte[] masterPin = Encoding.Unicode.GetBytes(dialog.MasterPin);
                            

                            _dataSource.SaveToDisk(masterPin);
                        };

                        dialog.DialogOpen += (s, e) =>
                        {
                            //if (OpenDataFile())
                            //{
                            //    return true;
                            //}
                        };

                        dialog.DialogCanceled += (s, e) =>
                        {
                            System.Environment.Exit(1);
                        };
                        break;                        
                    }
            }
        }

        

        public void DeleteItem()
        {
            var rows = uxList.SelectedRows;
            uxList.RemoveRows(rows, NSTableViewAnimation.Fade);
        }

        public nint ItemCount
        {
            get
            {
                return uxList.RowCount;
            }
        }


    }
}
