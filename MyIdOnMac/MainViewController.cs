// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Microsoft.Win32;
using System.Collections;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;

namespace MyIdOnMac
{
	public partial class MainViewController : NSViewController
	{

        private UxListDataSource _dataSource = new UxListDataSource();

        public MainViewController (IntPtr handle) : base (handle)
		{
		}

        private string IdFile
        {
            get
            {
                if (KnownFolders.DataFile != "")
                    return KnownFolders.DataFile;
                else
                    return Path.Combine(KnownFolders.DataDir, "myid_secret.data");
            }
            set
            {
                KnownFolders.DataFile = value;
            }
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Do any additional setup after loading the view.

           

        }
        public override void ViewDidAppear()
        {
            base.ViewDidAppear();

            if (uxList.Delegate != null)
                return;
            // Create the Product Table Data Source and populate it
            //_dataSource.Add(new IdItem("Xamarin.iOS", "User", "Password", "Allows you to develop native iOS Applications in C#"));
            //_dataSource.Add(new IdItem("Xamarin.Android", "User", "Password", "Allows you to develop native Android Applications in C#"));
            //_dataSource.Add(new IdItem("Xamarin.Mac", "User", "Password", "Allows you to develop Mac native Applications in C#"));

            // Populate the Product Table
            uxList.DataSource = _dataSource;
            uxList.Delegate = new UxListDelegate(_dataSource);

            if (System.IO.File.Exists(IdFile))
            {

                PerformSegue("SignInSegue", this);
            }
            else
            {
                if (!CreateNewFile())
                    System.Environment.Exit(1);  //First time app run
            }

        }

        private bool CreateNewFile()
        {
            if (KnownFolders.DataFile != "")
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Warning,
                    InformativeText = "You will lose access to existing data file if private key is not backed up. Only click Yes if you are 100% sure private key has been backed up or you no longer need existing data file. Otherwise click No.",
                    MessageText = "Backup private key",
                };
                alert.AddButton("Yes");
                alert.AddButton("No");
                
                var result = alert.RunModal();
                if (result != 1000)
                    return false;
            }


            PerformSegue("WelcomeSegue", this);

            return true;

            
        }

        public override NSObject RepresentedObject
        {
            get
            {
                return base.RepresentedObject;
            }
            set
            {
                base.RepresentedObject = value;
                // Update the view, if already loaded.
            }
        }

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            

        }

        [Action("add:")]
        public void Add(NSObject sender)
        {
            // Preform some action when the menu is selected
            Console.WriteLine("Request to add");
            PerformSegue("EditSegue", this);

        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            // Take action based on the segue name
            switch (segue.Identifier)
            {
                case "SignInSegue":
                    {
                        var dialog = segue.DestinationController as SignInViewController;
        
                        dialog.DialogAccepted += (s, e) =>
                        {
                            Console.WriteLine("Dialog accepted");

                            if (!LoadFromDisk(IdFile, null))
                            {
                                var alert = new NSAlert()
                                {
                                    AlertStyle = NSAlertStyle.Warning,
                                    InformativeText = "The data file may be corrupted. Please choose a different data file and try again.",
                                    MessageText = "Access denied",
                                };
                                alert.BeginSheet(this.View.Window);
                                System.Environment.Exit(0);
                            }
                        };
                        dialog.DialogCanceled += (s, e) =>
                        {
                            Console.WriteLine("Dialog Cancelled");
                            System.Environment.Exit(0);
                        };
                        dialog.Presentor = this;
                        break;
                    }
                case "EditSegue":
                    {
                        var dialog = segue.DestinationController as EditController;

                        dialog.DialogAccepted += (s, e) =>
                        {
                            Console.WriteLine("Dialog accepted");
                            _dataSource.Add(dialog.AIdItem);
                            uxList.ReloadData();
                            _dataSource.SaveToDisk();
                        };
                        dialog.Presentor = this;
                        break;
                    }
                case "WelcomeSegue":
                    {
                        var dialog = segue.DestinationController as WelcomeController;

                        dialog.Presentor = this;
                        
                        dialog.DialogOk += (s, e) =>
                        {
                            if (System.IO.File.Exists(dialog.DataFile))
                            {
                                var alert = new NSAlert()
                                {
                                    AlertStyle = NSAlertStyle.Warning,
                                    InformativeText = $"Data file already exists: {dialog.DataFile}",
                                    
                                    MessageText = "Unable to create new data file",
                                };
                                alert.AddButton("OK");
                                alert.RunModal();
                                System.Environment.Exit(1);
                            }
                            IdFile = dialog.DataFile;
                            byte[] masterPin = Encoding.Unicode.GetBytes(dialog.MasterPin);
                            

                            _dataSource.SaveToDisk(masterPin);
                        };

                        dialog.DialogOpen += (s, e) =>
                        {
                            //if (OpenDataFile())
                            //{
                            //    return true;
                            //}
                        };

                        dialog.DialogCanceled += (s, e) =>
                        {
                            System.Environment.Exit(1);
                        };
                        break;                        
                    }
            }
        }

        private bool LoadFromDisk(string pDataFile, string pPrivateKeyFile)
        {

            _dataSource.Clear();
            bool success = false;

            try
            {
                using (var fs = new FileStream(pDataFile, FileMode.Open, FileAccess.Read))
                {
                    int version = 0;
                    if (fs.ReadByte() == 0x20 && fs.ReadByte() == 0x22)
                        version = 2022;
                    else
                        // Set the stream position to the beginning of the file.
                        fs.Seek(0, SeekOrigin.Begin);

                    BinaryFormatter formatter = new BinaryFormatter();
                    using (RijndaelManaged myRijndael = new RijndaelManaged())
                    {
                        myRijndael.KeySize = 256;
                        myRijndael.BlockSize = 128;
                        myRijndael.Padding = PaddingMode.PKCS7;
                        //Cipher modes: http://security.stackexchange.com/questions/52665/which-is-the-best-cipher-mode-and-padding-mode-for-aes-encryption
                        myRijndael.Mode = CipherMode.CFB;

                        //byte[] keyBytes = GetKeyIv("Key");

                        if (pPrivateKeyFile != null)
                        {
                            if (!LoadPrivateKey(pPrivateKeyFile))
                            {
                                //TODO MessageBox.Show("Unable load private key!");
                                return false;
                            }
                        }
                        if (version == 2022)
                        {
                            byte[] pin = UxListDataSource.GetKeyIv("Pin");
                            byte[] salt = UxListDataSource.GetKeyIv("Salt");
                            var key = new Rfc2898DeriveBytes(pin, salt, 50000);
                            myRijndael.Key = key.GetBytes(32); // GetKeyIv("RiKey");// key.GetBytes(myRijndael.KeySize / 8);
                            myRijndael.IV = UxListDataSource.GetKeyIv("Iv2022");// key.GetBytes(myRijndael.BlockSize / 8);
                        }
                        else
                        {  //Old verion
                            byte[] keyBytes;
                            keyBytes = UxListDataSource.GetKeyIv("Key");

                            //byte[] savedKey = GetKeyIv("Key");
                            //if (!keyBytes.SequenceEqual(savedKey))
                            //{
                            //    MessageBox.Show("Invalid password!");
                            //    return false;
                            //}


                            if (UxListDataSource.GetKeyIv("RiKey") == null || UxListDataSource.GetKeyIv("RiIv") == null)
                            {
                                var alert = new NSAlert()
                                {
                                    AlertStyle = NSAlertStyle.Warning,
                                    InformativeText = "Please import private key and try again",
                                    MessageText = "Missing private key",
                                };
                                alert.BeginSheet(this.View.Window);
                            }
                            else
                            {
                                //var key = new Rfc2898DeriveBytes(keyBytes, GetKeyIv("IV"), 50000);
                                myRijndael.Key = UxListDataSource.GetKeyIv("RiKey");// key.GetBytes(myRijndael.KeySize / 8);
                                myRijndael.IV = UxListDataSource.GetKeyIv("RiIv");// key.GetBytes(myRijndael.BlockSize / 8);
                            }
                        }

                        using (var cryptoStream = new CryptoStream(fs, myRijndael.CreateDecryptor(), CryptoStreamMode.Read))
                        {
                            try
                            {
                                _dataSource.IdList = (List<IdItem>)formatter.Deserialize(cryptoStream);
                            }
                            catch (System.Security.Cryptography.CryptographicException)
                            {
                                return false;
                            }
                        }
                    }
                }

                //foreach (var idItem in _idList)
                //{
                //    AddListItem(idItem);
                //}
                //int col = (int)Registry.GetValue("HKEY_CURRENT_USER\\Software\\MyId", "SortColumn", -1);
                //if (col != -1)
                //{
                //    lvwColumnSorter.SortColumn = (int)Registry.GetValue("HKEY_CURRENT_USER\\Software\\MyId", "SortColumn", lvwColumnSorter.SortColumn);
                //    int or = (int)Registry.GetValue("HKEY_CURRENT_USER\\Software\\MyId", "SortOrder", (int)lvwColumnSorter.Order);
                //    lvwColumnSorter.Order = (SortOrder)or;
                //    // Perform the sort with these new sort options.
                //    uxList.Sort();
                //}
                success = true;
            }
            catch (System.Security.Cryptography.CryptographicException)
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Warning,
                    InformativeText = "Failed to decrypt data. Invalid PIN.",
                    MessageText = "LoadFromDisk",
                };
                alert.BeginSheet(this.View.Window);
                //MessageBox.Show("Failed to decrypt data. Invalid PIN.", "LoadFromDisk", MessageBoxButtons.OK, MessageBoxIcon.Error);
                //return false;
            }
            catch (Exception ex)
            {
                var alert = new NSAlert()
                {
                    AlertStyle = NSAlertStyle.Warning,
                    InformativeText = "Access denied: " + ex.ToString(),
                    MessageText = "Unlock MyId",
                };
                alert.BeginSheet(this.View.Window);

            }

            //ShowNumberOfItems();
            return success;
        }

        private bool LoadPrivateKey(string privateKeyFile)
        {
            //string bufferS = File.ReadAllText(privateKeyFile);

            //byte[] buffer = ToByteArray(bufferS.Replace(",", "").Trim());


            //if (buffer[0] == 0x20 && buffer[1] == 0x22) //new version
            //{
            //    int pos = 2;
            //    //byte[] iv = new byte[16];
            //    //Array.Copy(buffer, 2, iv, 0, 16);
            //    //SaveKeyIv("IV", iv);

            //    pos += 16;
            //    byte[] salt = new byte[32];
            //    Array.Copy(buffer, pos, salt, 0, 32);
            //    SaveKeyIv("Salt", salt);

            //    pos += 32;
            //    byte[] riIv = new byte[16];
            //    Array.Copy(buffer, pos, riIv, 0, 16);
            //    SaveKeyIv("Iv2022", riIv);

            //    return true;

            //}
            //else
            //{
            //    MessageBox.Show("Invalid key file");
            //}
            return false;
        }

        public void DeleteItem()
        {
            var rows = uxList.SelectedRows;
            uxList.RemoveRows(rows, NSTableViewAnimation.Fade);
        }

        public nint ItemCount
        {
            get
            {
                return uxList.RowCount;
            }
        }


    }
}
