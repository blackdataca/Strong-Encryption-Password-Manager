@page "/Create"
@page "/Create/{secretId}"
@attribute [Authorize]
@using MyIdWeb.Models
@inject AuthenticationStateProvider authProvider
@inject ISecretData secretData
@inject IUserData userData
@inject NavigationManager navManage
@rendermode InteractiveServer

@if (string.IsNullOrWhiteSpace(secretId))
{
    <h1>Add A Secret</h1>
}
else
{
    <h1>Secret Details</h1>
}
<div>
    <div>
        <div>
            <button @onclick="ClosePage"></button>
        </div>
        <EditForm Model="secretDetail" OnValidSubmit="SaveSecret" autocomplete="off">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="site">Site</label>
                <InputText id="site" @bind-Value="secretDetail.Site" />
            </div>
            <div>
                <label for="user">User</label>
                <InputText autocomplete="false" id="user" @bind-Value="secretDetail.UserName" />
            </div>
            <div>
                <label for="password">Password</label>
                <InputText type="password" id="password" @bind-Value="secretDetail.Password" />
            </div>
            <div>
                <label for="memo">Memo</label>
                <InputTextArea id="memo" @bind-Value="secretDetail.Memo" />
            </div>
            <div>
                <button class="btn btn-primary" type="submit">Save</button>
            </div>
            <div>
                <button class="btn btn-danger" @onclick="Delete">Delete</button>
            </div>
        </EditForm>

    </div>
</div>

@code {
    [Parameter]
    public string secretId { get; set; }
    private SecretDetailModel secretDetail = new();
    private SecretModel secret = new();
    private UserModel loggedInUser = new();

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (!string.IsNullOrWhiteSpace(secretId))
        {
            secret = await secretData.ReadSecretAsync(secretId, loggedInUser);
            //TODO - check if s is valid and belongs to current user
            if (secret is not null)
            {
                try
                {
                    secretDetail = JsonConvert.DeserializeObject<SecretDetailModel>(secret.Payload);
                }
                catch (JsonReaderException)
                {
                    //TODO Unify IdItem classes in projects
                    var item = JsonConvert.DeserializeObject<IdItem>(secret.Payload);
                    secretDetail.Site = item.Site;
                    secretDetail.UserName = item.User;
                    secretDetail.Password = item.Password;
                    secretDetail.Memo = item.Memo;
                    secretDetail.Deleted = item.Deleted ? DateTime.UtcNow : DateTime.MinValue;
                }
            }
        }
    }

    private void ClosePage()
    {
        navManage.NavigateTo("/main");
    }

    private async Task SaveSecret()
    {
        if (secret is null)
            return;
        if (string.IsNullOrWhiteSpace(secretId))
        {
            SecretModel s = new();
            s.Payload = JsonConvert.SerializeObject(secretDetail);
            s.UserIds.Add(loggedInUser.Id);
            await secretData.CreateSecret(s, loggedInUser);
        }
        else
        {
            secret.Payload = JsonConvert.SerializeObject(secretDetail);
            await secretData.UpdateSecret(secret, loggedInUser);
        }
        secretDetail = new();
        secret = null;
        ClosePage();
    }

    private async Task Delete()
    {
        secret.Deleted = DateTime.UtcNow;
        await secretData.UpdateSecret(secret, loggedInUser);
        secret = null;
        ClosePage();
    }
}
