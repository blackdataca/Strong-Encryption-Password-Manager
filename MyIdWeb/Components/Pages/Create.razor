@page "/Create"
@page "/Create/{secretId}"
@attribute [Authorize]
@using MyIdWeb.Models
@inject AuthenticationStateProvider authProvider
@inject ISecretData secretData
@inject IUserData userData
@inject NavigationManager navManage
@rendermode InteractiveServer

@if (string.IsNullOrWhiteSpace(secretId))
{
    <h1>Add A Secret</h1>
}
else
{
    <h1>Secret Details</h1>
}
<div>
    <div>
        <div>
            <button @onclick="ClosePage"></button>
        </div>
        <EditForm Model="secretDetail" OnValidSubmit="SaveSecret">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group">
                <label class="input-group-text" for="site">Site</label>
                <InputText  class="form-control rounded-control" id="site" @bind-Value="secretDetail.Site" />
            </div>
            <div class="input-group">
                <label class="input-group-text" for="user">User</label>
                <InputText  class="form-control rounded-control" id="user" @bind-Value="secretDetail.User" />
            </div>
            <div class="input-group">
                <label class="input-group-text" for="password">Password</label>
                <InputText class="form-control rounded-control" type="@PasswordType" id="password" @bind-Value="secretDetail.Password" autoComplete="new-password" />
                <span class="input-group-text @EyeColor" @onclick="ShowPassword"></span>
            </div>
            <div class="input-group">
                <label class="input-group-text" for="memo">Memo</label>
                <InputTextArea class="form-control rounded-control" id="memo" @bind-Value="secretDetail.Memo" />
            </div>
            <div class="input-group">
                <button class="btn btn-primary" type="submit">Save</button>
            </div>
            <div class="input-group">
                @if (secret.Deleted)
                {
                    <button class="btn btn-secondary" @onclick="() => Delete(false)">Undelete</button>
                }
                else
                {
                    <button class="btn btn-danger" @onclick="() => Delete(true)">Delete</button>
                }
            </div>
        </EditForm>

    </div>
</div>

@code {
    [Parameter]
    public string secretId { get; set; }
    private SecretDetailModel secretDetail = new();
    private SecretModel secret = new();
    private UserModel loggedInUser = new();
    private string PasswordType = "password";
    private string EyeColor = "bi bi-eye-fill";

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (!string.IsNullOrWhiteSpace(secretId))
        {
            secret = await secretData.ReadSecretAsync(secretId, loggedInUser);
            //TODO - check if s is valid and belongs to current user
            if (secret is not null)
            {
                secretDetail = JsonConvert.DeserializeObject<SecretDetailModel>(secret.Payload);
            }
        }
    }

    private void ClosePage()
    {
        navManage.NavigateTo("/main");
    }

    private async Task SaveSecret()
    {
        if (secret is null)
            return;
        if (string.IsNullOrWhiteSpace(secretId))
        {
            SecretModel s = new();
            s.Payload = JsonConvert.SerializeObject(secretDetail);
            s.UserIds.Add(loggedInUser.Id);
            await secretData.CreateSecret(s, loggedInUser);
        }
        else
        {
            secret.Payload = JsonConvert.SerializeObject(secretDetail);
            secret.Modified = DateTime.UtcNow;
            await secretData.UpdateSecret(secret, loggedInUser);
        }
        ClosePage();
    }

    private async Task Delete(bool isDelete)
    {
        secret.Deleted = isDelete;
        secret.Modified = DateTime.UtcNow;
        await secretData.UpdateSecret(secret, loggedInUser);
        ClosePage();
    }

    private void ShowPassword()
    {
        if (PasswordType == "password")
        {
            PasswordType = "text";
            EyeColor = "bi bi-eye-slash-fill";
        }
        else
        {
            PasswordType = "password";
            EyeColor = "bi bi-eye-fill";
        }
    }
}
