@page "/SharedSecret/{secretId}/{tempUserId}/{accessCode}"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ISecretData secretData
@inject IUserData userData
@inject NavigationManager navManager
@inject IConfiguration config
@inject ILogger<Create> logger
@inject IJSRuntime jSRuntime
@rendermode InteractiveServer

<h3>SharedSecret</h3>

<div>
    <button @onclick="ClosePage">X</button>
</div>

<h4>Incoming secret for: @secretDetail.Site</h4>
<div>
    <button type="button" class="btn btn-primary" @onclick="AcceptSecret">Accept</button>
    <button type="button" class="btn btn-danger" @onclick="ClosePage">Reject</button>
</div>

@code {
    [Parameter]
    public string? secretId { get; set; }
    [Parameter]
    public string? tempUserId { get; set; }
    [Parameter]
    public string? accessCode { get; set; }

    private IdItem secretDetail = new();
    private SecretModel secret = new();
    private UserModel loggedInUser = new();

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (loggedInUser is null)
            navManager.NavigateTo("/main");
        if (!string.IsNullOrWhiteSpace(secretId))
        {
            // 6. Bob creates account or login
            // 7. Get Secret Key by the first two steps in above [Read secret](#read-secret) using temporary user
            var tempUser = await userData.GetUserAsync(tempUserId);
            if (tempUser is null)
            {
                navManager.NavigateTo("/main");
            }
            else if (tempUser.Name != $"TempUser({loggedInUser.Name})")
            {
                navManager.NavigateTo("/main");
            }
            secret = await secretData.ReadSecretAsync(secretId, tempUser);
            if (secret is not null && !string.IsNullOrWhiteSpace(secret.Payload))
            {
                secretDetail = JsonConvert.DeserializeObject<IdItem>(secret.Payload);
                if (secretDetail is null)
                {
                    navManager.NavigateTo("/main");
                }
            }
            else
            {
                navManager.NavigateTo("/main");
            }
        }
    }
    
    private void ClosePage()
    {
        navManager.NavigateTo("/main");
    }

    private void AcceptSecret()
    {
        // 8. Asymmetric encrypt Secret Key with Bob's users.public_key -> secrets_users.secret_key(encrypted)
        // 9. Remove temporary user and temporary secrets_users record after above step successful or expiry
        // 10. Bob follows above [read secret](#read-secret)
    }

}
