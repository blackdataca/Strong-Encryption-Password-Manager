@page "/Share/{secretId}"
@using MyIdCloud.Data
@using SendGrid
@using SendGrid.Helpers.Mail
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ISecretData secretData
@inject IUserData userData
@inject NavigationManager navManager
@inject IConfiguration config
@inject ILogger<Create> logger
@rendermode InteractiveServer

<h3>Share </h3>

<div>
    <button @onclick="ClosePage">X</button>
</div>
<EditForm Model="@shareWith" OnValidSubmit="ShareSecret">
    <DataAnnotationsValidator />
        <InputText class="form-control rounded-control" placeholder="Add people by email"
           aria-label="Add people"
           @bind-Value="shareWith.Email" />
    <ul class="list-group">
        <li class="list-group-item">An item</li>
        <li class="list-group-item">A second item</li>
        <li class="list-group-item">A third item</li>
        <li class="list-group-item">A fourth item</li>
        <li class="list-group-item">And a fifth one</li>
    </ul>
    <div class="input-group">
        <button class="btn btn-primary" type="submit">Share</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? secretId { get; set; }

    private UserModel loggedInUser = new();
    private IdItem secretDetail = new();
    private SecretModel secret = new();
    private ShareWith shareWith = new();

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        if (!string.IsNullOrWhiteSpace(secretId))
        {
            secret = await secretData.ReadSecretAsync(secretId, loggedInUser);
            if (secret is not null && !string.IsNullOrWhiteSpace(secret.Payload))
            {
                secretDetail = JsonConvert.DeserializeObject<IdItem>(secret.Payload);
                if (secretDetail is null)
                {
                    navManager.NavigateTo("/main");
                }
            }
            else
            {
                navManager.NavigateTo("/main");
            }
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo($"/Create/{secretId}");
    }

    private async Task ShareSecret()
    {
        //Share secret with Bob
        // 1. Get Secret Key by the first two steps in above [Read secret](#read-secret)
        // 1.1. Symmetric decrypt Private Key from users.private_key(encrypted) with user's password + users.uuid as salt
        // 1.2. Asymmetric decrypt Secret Key from secrets_users.secret_key(encrypted) with Private Key

        //this secret oject

        // 2. Generate a temporary user with asymmetric Public Key -> users.public_key, and Private Key 
        // 2. Save Public Key in -> users.public_key
        // 3. Symmetric encrypt Private Key with temporary access code -> users.private_key(encrypted)
        var tempUser = UserModel.CreateTempUser();
        tempUser.Name = $"TempUser({shareWith.Email})";
        tempUser.Expiry = DateTime.UtcNow.AddHours(1);
        await userData.CreateUser(tempUser);

        // 4. Create temporary secrets_users record with secret_key asymmetric encrypted with temporary user's public key

        bool tempSecretCreated = await secretData.CreateSharedSecretAsync(secret, loggedInUser, tempUser);

        // 5. Send secret id, temporary user id and temporary access code to Bob
        var apiKey = config["SendGridApiKey"];
        var client = new SendGridClient(apiKey);
        var fromEamil = config["SenderEmail"];
        var from = new EmailAddress(fromEamil);
        var to = new EmailAddress(shareWith.Email);
        var subject = "Shared secret";
        var url = $"{navManager.BaseUri}SharedSecret/{secret.Id}/{tempUser.Id}/{tempUser.SecurityStamp}";
        var plainTextContent = $"This is a shared secret {url}";
        var htmlContent = $"This is a shared <strong>secret</strong>:<p>{url}</p>";
        var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, htmlContent);
        var response = await client.SendEmailAsync(msg);

        navManager.NavigateTo($"/Create/{secretId}");
    }
}
