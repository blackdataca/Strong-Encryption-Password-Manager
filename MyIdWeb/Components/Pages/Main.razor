@page "/Main"
@using System.Text.Json
@using MyIdWeb.Models
@using Newtonsoft.Json
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ISecretData secretData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@rendermode InteractiveServer

<h1 class="page-heading text-uppercase mb-4">Secrets</h1>

<div class="">
    <button @onclick="LoadCreatePage" class="btn btn-primary">Create</button>
</div>

<div class="row">
    <div class="col-md-2">
    @if (IsTaskRunning)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    }
    else
    {
        if (secretCount > 10)
        {
            <span>>10</span>
        }
        else
        {
            @secrets?.Count 
        }
    }
    Secrets</div>
    <div class="col-md-10 search-box">
        <input type="text" placeholder="Search"
            aria-label="Search box" class="form-control rounded-control"
               @oninput="((txt) => OnSearchInput((string)txt.Value))" value="@searchText" />
    </div>
</div>

<div>
    <div>
        @if (secrets?.Count > 0)
        {
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Site</th>
                        <th>Name</th>
                        <th>Memo</th>
                    </tr>
                </thead>
                <tbody>
                    @* <Virtualize Items="@secrets" Context="s" OverscanCount="10"> *@
                        @foreach (var s in secrets)
                        {
                            <tr class="@ShowDeleted(s)" @onclick="(() => OpenDetails(s.Id))">
                                <td>@s.Site</td>
                                <td>@s.UserName</td>
                                <td>@s.Memo</td>
                            </tr>
                        }
                    @* </Virtualize> *@
                </tbody>
            </table>

        }
    </div>
</div>

@code {
    private bool IsTaskRunning = false;
    private UserModel loggedInUser;
    private List<SecretDetailModel> secrets;
    private string searchText = "";
    private int secretCount;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.EndsWith("identifier"))?.Value;

        if (!string.IsNullOrWhiteSpace(objectId))
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();
            string name = authState.User.Claims.FirstOrDefault(c => c.Type.EndsWith("/name"))?.Value;

            string securityStamp = authState.User.Claims.FirstOrDefault(c => c.Type.EndsWith("SecurityStamp"))?.Value;

            bool isDirty = false;
            bool isNew = false;
            if (!objectId.Equals(loggedInUser.Id))
            {
                isDirty = true;
                isNew = true;
                loggedInUser.Id = objectId;
            }
            if (!name.Equals(loggedInUser.Name))
            {
                isDirty = true;
                loggedInUser.Name = name;
            }

            if (securityStamp != loggedInUser.SecurityStamp)
            {
                isDirty = true;
                loggedInUser.SetSecurityStamp(securityStamp);
            }

            if (isDirty)
            {
                if (isNew)
                    await userData.CreateUser(loggedInUser);
                else
                    await userData.UpdateUser(loggedInUser);
            }
            //secrets = await secretData.GetUserSecrets(loggedInUser.Id);
        }
        else
            navManager.NavigateTo("Account/Login");

    }

    private void LoadCreatePage()
    {
        if (loggedInUser is not null)
            navManager.NavigateTo("/Create");
        else
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && loggedInUser != null)
        {
            await LoadFilterState();
            await FilterSecrets();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task FilterSecrets()
    {
        IsTaskRunning = true;
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            string[] searchTerms = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var secretPayloads = await secretData.GetUserSecretsAsync(loggedInUser);
            secretPayloads = secretPayloads.Where(
                s => searchTerms.All(val => s.Payload.Contains(val, StringComparison.InvariantCultureIgnoreCase))
            ).Take(11).ToList();
            secrets = new List<SecretDetailModel> { };
            secretCount = secretPayloads.Count;
            //foreach (var payload in secretPayloads)
            for (int i = 0; i < secretCount; i++)
            {
                if (i>=10)
                {
                    break;
                }
                var payload = secretPayloads[i];
                SecretDetailModel secretDetail = new();
                try
                {
                    secretDetail = JsonConvert.DeserializeObject<SecretDetailModel>(payload.Payload);
                    
                    secretDetail.Deleted = payload.Deleted;
                }
                catch (Exception)
                { //TODO Unify IdItem classes in projects
                    var item = JsonConvert.DeserializeObject<IdItem>(payload.Payload);
                    secretDetail.Site = item.Site;
                    secretDetail.UserName = item.User;
                    secretDetail.Password = item.Password;
                    secretDetail.Memo = item.Memo;
                    secretDetail.Deleted = item.Deleted ? DateTime.UtcNow : DateTime.MinValue;
                    //secretDetail.Id = item.Uid.ToString();
                }
                secretDetail.Id = payload.Id.ToString();
                
                secrets.Add(secretDetail);
            }

        }

        await SaveFilterState();
        IsTaskRunning = false;
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSecrets();
    }

    private void OpenDetails(string secretId)
    {
        navManager.NavigateTo($"/Create/{secretId}");
    }

    private string ShowDeleted(SecretDetailModel s)
    {
        if (s.Deleted == DateTime.MinValue)
            return "";
        else
            return "table-danger text-decoration-line-through";
    }
}
