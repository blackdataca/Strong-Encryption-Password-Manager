@page "/Main"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ISecretData secretData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@rendermode InteractiveServer

<h1 class="page-heading text-uppercase mb-4">Secrets</h1>

<div class="">
    <button @onclick="LoadCreatePage" class="btn btn-primary">Create</button>
</div>

<div class="row">

    <div class="col-md-2">@secrets?.Count Secrets</div>
    <div class="col-md-10 search-box">
        <input type="text" placeholder="Search"
            aria-label="Search box" class="form-control rounded-control"
            @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>

<div>
    <div>
        @if (secrets?.Count > 0)
        {
            <Virtualize Items="@secrets" Context="s" OverscanCount="10">
                <div>
                    <div @onclick="(() => OpenDetails(s))">
                        @s.Payload
                    </div>
                </div>
            </Virtualize>
        }
    </div>
</div>

@code {
    private UserModel loggedInUser;
    private List<SecretModel> secrets;
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.EndsWith("identifier"))?.Value;

        if (!string.IsNullOrWhiteSpace(objectId))
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();
            string name = authState.User.Claims.FirstOrDefault(c => c.Type.EndsWith("/name"))?.Value;

            string securityStamp = authState.User.Claims.FirstOrDefault(c => c.Type.EndsWith("SecurityStamp"))?.Value;

            bool isDirty = false;
            bool isNew = false;
            if (!objectId.Equals(loggedInUser.Id))
            {
                isDirty = true;
                isNew = true;
                loggedInUser.Id = objectId;
            }
            if (!name.Equals(loggedInUser.Name))
            {
                isDirty = true;
                loggedInUser.Name = name;
            }

            if (securityStamp != loggedInUser.SecurityStamp)
            {
                isDirty = true;
                loggedInUser.SetSecurityStamp(securityStamp);
            }

            if (isDirty)
            {
                if (isNew)
                    await userData.CreateUser(loggedInUser);
                else
                    await userData.UpdateUser(loggedInUser);
            }
            //secrets = await secretData.GetUserSecrets(loggedInUser.Id);
        }
        else
            navManager.NavigateTo("Account/Login");

    }

    private void LoadCreatePage()
    {
        if (loggedInUser is not null)
            navManager.NavigateTo("/Create");
        else
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && loggedInUser != null)
        {
            await LoadFilterState();
            await FilterSecrets();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task FilterSecrets()
    {
        var output = await secretData.GetUserSecrets(loggedInUser);
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            string[] searchTerms = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            output = output.Where(
                s => searchTerms.All(val => s.Payload.Contains(val, StringComparison.InvariantCultureIgnoreCase))
            ).ToList();
        }

        secrets = output;

        await SaveFilterState();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSecrets();
    }

    private void OpenDetails(SecretModel secret)
    {
        navManager.NavigateTo($"/Create/{secret.Id}");
    }
}
